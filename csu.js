
var utils = require('./utils');

/**
 * Description: Decodes a Card Status Update (CSU - Visa proprietary tag). 
 * Indicates the disposition of the transaction and requested updates to the card,
 * received from the issuer for online authorizations. The CSU is only used 
 * if Issuer Authentication is performed and passes.
 * Input: 4-bytes parameter representing the CSU value, entered as hexadecimal
 * Output: Decoded value for the 4 bytes of the CSU. The output is represented as a list of key-pair 
 * for each relevant bits (bits set to 1b) for Bytes 1-3.
 * For Byte 4, bits 7-6 are decoded based on their preset values (these are not managed as a bit field). 
 * The output will have only one entry for bits 7-6; this entry will always be present in the results.
 * Other bits from Byte 4 are managed as bit fields and are processed identically to the content of Bytes 1-3
 */
exports.decodeCSU = function(value){
    
    var interpretedCSU= {};
    interpretedCSU.byte1 = []
    interpretedCSU.byte2 = []
    interpretedCSU.byte3 = []
    interpretedCSU.byte4 = []

    if(value){
      //B1 processing
      //Left nibble
      var csuB1LeftNibble = value.substr(0,1);
      var csuB1LeftNibbleBin = utils.Hex2Bin(csuB1LeftNibble);
      
      for(i=0;i<csuB1LeftNibbleBin.length;i++){
          var b = 4-i
          if(csuB1LeftNibbleBin[i] == 1){    
              interpretedCSU.byte1.push(utils.createBitValue(b,csuValuesAt(1,i)))
          }
      }

      //B1 Right nibble - PIN try counter
      
      var csuB1RightNibble = value.substr(1,1);
      interpretedCSU.byte1.push(utils.createBitValue(4,"PIN try counter: " + utils.Hex2Dec(csuB1RightNibble)));

      //B2 processing
      //bits 8-3 bitfield
      var csuB2 = value.substr(2,2);
      var csuB2bin = utils.Hex2Bin(csuB2);

      var csuB2b8to3 = csuB2bin.substr(0,6)
      
      for(i=0;i<csuB2b8to3.length;i++){
          var b = 6-i
          if(csuB2b8to3[i] == 1){    
              interpretedCSU.byte2.push(utils.createBitValue(b,csuValuesAt(2,i)))
          }
      }

      //bits 2-1 - update counters
      var csuB2b2b1 = csuB2bin.substr(6,2)
      interpretedCSU.byte2.push(utils.createBitValue(2,csuValuesAt(2,2,csuB2b2b1)))
      
      //B3 processing - bitfield
      var csuB3 = value.substr(4,2);
      var csuB3bin = utils.Hex2Bin(csuB3);
      
      for(i=0;i<csuB3bin.length;i++){
          var b = 8-i
          if(csuB3bin[i] == 1){    
              interpretedCSU.byte3.push(utils.createBitValue(b,csuValuesAt(3,i)))
          }
      }
      
      //B4 processing
      var csuB4 = value.substr(6,2);
      var csuB4bin = utils.Hex2Bin(csuB4);
      
      for(i=0;i<csuB4bin.length;i++){
          var b = 8-i
          if(csuB4bin[i] == 1){    
              interpretedCSU.byte4.push(utils.createBitValue(b,csuValuesAt(4,i)))
          }
      }    
      
    }
  
  return interpretedCSU
  
}

function csuValuesAt(byte, position, value){

      var csuResultsB1LeftNibble = [
        "Proprietary Authentication Data included",
        "RFU",
        "RFU",
        "RFU"
    ]
      
    var csuResultsB2b8to3 = [
        "Issuer approves online transaction",
        "Card block",
        "Application block",
        "Update PIN Try Counter",
        "Set Go Online on Next Transaction",
        "CSU generated by proxy for the issuer"
    ]

    var csuResultsB2b2b1 = {
        '00' : 'Do not update velocity-checking counters',
        '01' : 'Set velocity-checking counters to Upper Limits',
        '10' : 'Reset velocity-checking counters to Zero',
        '11' : 'Add transaction to velocity-checking counters'
    }
    
    var csuResultsB3 = [
        "RFU",
        "RFU",
        "RFU",
        "RFU",
        "RFU",
        "RFU",
        "RFU",
        "RFU"
    ]
    
    var csuResultsB4 = [
        "Issuer Discretionary",
        "Issuer Discretionary",
        "Issuer Discretionary",
        "Issuer Discretionary",
        "Issuer Discretionary",
        "Issuer Discretionary",
        "Issuer Discretionary",
        "Issuer Discretionary"
    ]

  if(byte){
    if(byte == 1){
      //B1
      if((position <= 8) && (position >=5)){
        return csuResultsB1[position]
      }
    }
    else if(byte == 2){
      //B2
        if((position <= 8) && (position >=3)){
          //bitfield
          return csuResultsB2b8to3[position]
        }
        else if ((position == 2) || (position == 1)){
            return csuResultsB2b2b1[value]
        }  
    }
    else if(byte == 3){
        return csuResultsB3[position]
    }
    else if(byte == 4){
        return csuResultsB4[position]
    }
  }

}
